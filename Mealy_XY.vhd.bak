library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

Entity Mealy_XY IS Port
(
 clk_input, rst_n									: IN std_logic;
 pb 													: IN std_logic_vector(3 downto 2);
 x_eq, x_lt, x_gt									: IN std_logic;
 y_eq, y_lt, y_gt									: IN std_logic;
 clk_en_x, clk_en_y 								: OUT std_logic;
 up_down_y, up_down_x							: OUT std_logic;
 extender_en										: OUT std_logic
 );
END ENTITY;
 

 Architecture SM of Mealy is
 
  
 TYPE STATE_NAMES IS (x_move, y_move, both_move, on_target, start);   -- list all the STATE_NAMES values


 SIGNAL current_state, next_state	:  STATE_NAMES;     	-- signals of type STATE_NAMES


 BEGIN
 
 --------------------------------------------------------------------------------
 --State Machine:
 --------------------------------------------------------------------------------

 -- REGISTER_LOGIC PROCESS:
 
Register_Section: PROCESS (clk_input, rst_n)  -- this process synchronizes the activity to a clock
BEGIN
	IF (rst_n = '0') THEN
		current_state <= start;
	ELSIF(rising_edge(clk_input)) THEN
		current_state <= next_State;
	END IF;
END PROCESS;	



-- TRANSITION LOGIC PROCESS

Transition_Section: PROCESS (pb(3 downto 2), x_eq, y_eq, current_state) 

BEGIN
     CASE current_state IS
	  
			WHEN start =>
				IF((x_eq = '1') AND (y_eq = '1')) THEN 		--when both on target 
         		next_state <= on_target;
         	ELSIF ((x_eq = '0') AND (y_eq = '0')) THEN 	--when both off target
         		next_state <= both_move;
         	ELSIF (y_eq = '0')THEN						--only y off target
         		next_state <= y_move;
         	ELSE										--stay at x move
         		next_state <= x_move;
				END IF;
				
			
         WHEN x_move =>
         	IF((x_eq = '1') AND (y_eq = '1')) THEN 		--when both on target 
         		next_state <= on_target;
         	ELSIF ((x_eq = '0') AND (y_eq = '0')) THEN 	--when both off target
         		next_state <= both_move;
         	ELSIF (y_eq = '0')THEN						--only y off target
         		next_state <= y_move;
         	ELSE										--stay at x move
         		next_state <= x_move;
				END IF;
				
          WHEN y_move =>
         	IF((x_eq = '1') AND (y_eq = '1')) THEN 		--when both on target 
         		next_state <= on_target;
         	ELSIF ((x_eq = '0') AND (y_eq = '0')) THEN 	--when both off target
         		next_state <= both_move;
         	ELSIF (x_eq = '0') THEN						--only x off target
         		next_state <= x_move;
         	ELSE										--stay at y move
         		next_state <= y_move;
				END IF;
				
         WHEN both_move =>
         	IF((x_eq = '1') AND (y_eq = '1')) THEN 		--when both on target 
         		next_state <= on_target;
         	ELSIF((x_eq = '1') AND (y_eq = '0')) THEN	--y off targ
         		next_state <= y_move;
         	ELSIF((x_eq = '0') AND (y_eq = '1')) THEN 	--x off targ
         		next_state <= x_move;
         	ELSE
         		next_state <= both_move;				--stay at both off target
				END IF;

         WHEN on_target =>
         	IF((x_eq = '0') AND (y_eq = '0')) THEN		--both moving
         		next_state <= both_move;
         	ELSIF(x_eq = '0')THEN						--only x off target
         		next_state <= x_move;
         	ELSIF(y_eq = '0')THEN						--only y off target
         		next_state <= y_move;
         	ELSE										--stay at on target
         		next_state <= on_target;
				END IF;

 		END CASE;

 END PROCESS;

-- DECODER SECTION PROCESS (Moore Form)

Decoder_Section: PROCESS (pb(3 downto 2), x_lt, x_gt, y_lt, y_gt, current_state) 

BEGIN
    
	IF (current_state = start) THEN
		clk_en_x <= '0';
		clk_en_y <= '0';
		up_down_x <= '0';
		up_down_y <= '0';
	
	ELSIF (current_state = x_move) THEN
		IF (x_lt = '1') THEN
			up_down_x <= '1'; 
		ELSE
			up_down_x <= '0';
		END IF;
		clk_en_x <= not pb(3); -- or make '1'
		clk_en_y <= '0';

	ELSIF (current_state = y_move) THEN
		IF (y_lt = '1') THEN
			up_down_y <= '1';
		ELSE
			up_down_y <= '0';
		END IF;
		clk_en_y <= not pb(2); -- or make '1'
		clk_en_x <= '0';
		
	ELSIF (current_state = both_move) THEN
		IF (x_lt = '1') THEN
			up_down_x <= '1';
			IF(y_lt = '1') THEN
				up_down_y <= '1';
			ELSE
				up_down_y <= '0';
			END IF;
		ELSE
			up_down_x <= '0';
			IF(y_lt = '1') THEN
				up_down_y <= '1';
			ELSE
				up_down_y <= '0';
			END IF;
		END IF;
		clk_en_x <= ((not pb(3)) AND (not pb(2))); -- or make '1'
		clk_en_y <= '1';

	ELSIF (current_state = on_target) THEN
		clk_en_x <= '0';
		clk_en_y <= '0';
		extender_en <= '1';

	END IF;

 END PROCESS;

 END ARCHITECTURE SM;