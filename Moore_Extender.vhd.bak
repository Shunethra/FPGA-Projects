library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

ENTITY Moore_Extender IS PORT (
          CLK		     		: in  std_logic;
          RESET_n      		: in  std_logic;
			 pb					: in  std_logic_vector(1 downto 1); --EXT_TOGGLE
			 EXT_ENBL			: in  std_logic;
			 leds1				: in std_logic_vector(7 downto 4);
          EXT_OUT 		   : out std_logic;
			 clk_en     		: out std_logic;
			 left_right   		: out std_logic;
			 GRAP_ENBL			: out  std_logic
			 );
END ENTITY;

ARCHITECTURE SM OF moore1 IS

-- list all the STATES  
   TYPE STATES IS (start, fully_extended, retracting, extending);   

   SIGNAL current_state, next_state			:  STATES;       -- current_state, next_state signals are of type STATES

BEGIN

-- STATE MACHINE: MOORE Type

REGISTER_SECTION: PROCESS(CLK, RESET_n) -- creates sequential logic to store the state. The rst_n is used to asynchronously clear the register
   BEGIN
		IF (RESET_n = '0') THEN
	         current_state <= start;
		ELSIF (rising_edge(CLK)) then
				current_state <= next_state; -- on the rising edge of clock the current state is updated with next state
		END IF;
   END PROCESS;
	

 TRANSITION_LOGIC: PROCESS(EXT_ENBL, pb, current_state, leds1) -- logic to determine next state. 
   BEGIN
     CASE current_state IS
          WHEN start =>		
            IF ((EXT_ENBL = '1') AND (pb(1 downto 1) = "0")) THEN 
					next_state <= extending;
				ELSE
               next_state <= start;
            END IF;
				
        WHEN extending =>		
            IF ((leds1 = "1111") AND (EXT_ENBL = '1')) THEN --only exit extending state when all corresponding leds are on
               next_state <= fully_extended;
				ELSE
               next_state <= extending;
            END IF;

         WHEN fully_extended =>		
				IF((pb(1 downto 1) = "0") AND (EXT_ENBL = '1'))THEN
					next_state <= retracting;
				ELSIF(EXT_ENBL = '0') THEN
					next_state <= retracting;
				ELSE
					next_state <= fully_extended;
            END IF;
				
			WHEN retracting =>											--only exit retracting state when all corresponding leds are off
				IF((leds1 = "0000") AND (EXT_ENBL = '1')) THEN
					next_state <= start;
				ELSE
					next_state <= retracting;
				END IF;
					
 		END CASE;
 END PROCESS;

 MOORE_DECODER: PROCESS(current_state) 			-- logic to determine outputs from state machine states
   BEGIN
     CASE current_state IS
	  
        WHEN start =>		
			 EXT_OUT <= '0';
			 clk_en	<= '0';
			 GRAP_ENBL <= '0';
			 
			WHEN extending =>								--enable respective left right shift clock
			 clk_en	<= '1';
			 left_right <= '1';
			 EXT_OUT <= '1';
			 GRAP_ENBL <= '0';
			 
			WHEN fully_extended => 						--show grappler may be enabled
				clk_en <= '0';
				EXT_OUT <= '1';
				GRAP_ENBL <= '1';
			 
        WHEN retracting => 							--enable respective left right shift clock
			 clk_en	<= '1';
			 left_right <= '0';
			 EXT_OUT <= '1';
			 GRAP_ENBL <= '0';
			 
		END CASE;

 END PROCESS;

END SM;
